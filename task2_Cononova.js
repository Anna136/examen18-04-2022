const tablou = [];
const n = prompt('Введите количество элементов массива: ');
for (let i = 0; i < n; i++){
    tablou.push(prompt('Введите ' + Number(i+1) + ' элемент массива:'));
}

alert('Вывод в консоли.');

console.log('while');

i = 0;
while(i < n){
    console.log(tablou[i]);
    i++;
}

console.log('do while');

i = 0;
do {
    console.log(tablou[i]);
    i++;
  } while (i < n);

console.log('for');

for (i = 0; i < n; i++){
    console.log(tablou[i]);
}

console.log('for in');

for(let key in tablou){
    console.log(tablou[key]);
}

console.log('for of');

for(let element of tablou){
    console.log(element);
}

console.log('forEACH');

tablou.forEach(function(item) {
    console.log(item);
});

console.log('map');

tablou.map(function(item) {
    console.log(item);
});

/*
for
код тела цикла выполнится как минимум один раз. счетчик можно указать как и в условии цикла, так и до цикла. любая часть данного цикла может быть пропущена
while
код из тела цикла выполняется, пока условие цикла истинно. если условие изначально истинно, цикл ни разу не выполнится.
do while
в отличии от цикла while, код из тела цикла выполнится хотя бы один раз за счет того, что условие цикла do while проверяется не в начале выполнения, а в конце.
for of
данный цикл не предоставляет доступа к номеру текущего элемента, только к его значению, но в большинстве случаев этого достаточно. а также это короче.
for in
данный цикл предназначен для перебора всех свойств объекта, поэтому при переборе элементов массива с помощью данного цикла, процесс будет гораздо дольше, нежели с помощью других циклов.
forEACH
данный цикл позволяет запускать функцию для каждого элемента массива.
map
данный цикл вызывает функцию для каждого элемента массива и возвращает массив результатов выполнения этой функции.
*/ 